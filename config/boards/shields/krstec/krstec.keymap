#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT  0
#define LOWER    1
#define RAISE    2
#define BOTH     3
#define NUMPAD   4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
    &mt LGUI ESC  &kp N1 &kp N2 &kp N3   &kp N4    &kp N5             &kp N6    &kp N7      &kp N8    &kp N9  &kp N0   &kp BSPC
    &kp TAB       &kp Q  &kp W  &kp E    &kp R     &kp T              &kp Y     &kp U       &kp I     &kp O   &kp P    &kp MINUS
    &kp LSHIFT    &kp A  &kp S  &kp D    &kp F     &kp G              &kp H     &kp J       &kp K     &kp L   &kp SEMI &mt RSHIFT ENTER
    &kp LCTRL     &kp Z  &kp X  &kp C    &kp V     &kp B              &kp N     &kp M       &kp COMMA &kp DOT &kp FSLH &kp SQT
                                 &kp LALT &mo LOWER &lt RAISE BSPC &kp SPACE &mo RAISE &mo NUMPAD &kp RALT  
            >;
        };

        lower_layer {
            bindings = <
    &trans &kp F1   &kp F2       &kp F3       &kp F4    &kp F5        &kp F6 &kp F7   &kp F8   &kp F9    &kp F10  &trans   
    &trans &kp F11  &kp F12      &trans       &trans    &trans        &trans &trans   &kp UP   &trans    &trans   &trans
    &trans &kp C_PP &kp C_VOL_DN &kp C_VOL_UP &kp PG_UP &kp PG_DN     &trans &kp LEFT &kp DOWN &kp RIGHT &kp HOME &kp END
    &mt LCTRL DEL &trans &trans  &kp LEFT     &kp RIGHT &trans        &trans &trans   &trans   &trans    &trans   &trans
                                 &trans       &trans    &trans &trans &trans &trans   &trans
            >;
        };

        raise_layer {
            bindings = <
    &trans &kp KP_N7 &kp KP_N8  &kp KP_N9 &kp KP_ASTERISK &trans        &trans    &trans    &trans            &trans           &trans    &trans
    &trans &kp KP_N4 &kp KP_N5  &kp KP_N6 &kp KP_SLASH    &trans        &trans    &trans    &trans            &trans           &trans    &trans
    &trans &kp KP_N1 &kp KP_N2  &kp KP_N3 &kp KP_MINUS    &trans        &kp MINUS &kp EQUAL &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp PIPE  &kp GRAVE
    &trans &kp KP_N0 &kp KP_N0  &kp KP_DOT &kp KP_PLUS    &trans        &trans    &kp PLUS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET &kp BSLH &kp TILDE 
                                            &trans &trans &trans &trans &trans    &trans    &trans
            >;
        };

        both_layer {
            bindings = <
    &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans       &trans        &trans &trans &trans &trans &trans &trans
    &trans       &trans       &trans       &trans       &trans       &trans        &trans &trans &trans &trans &trans &trans
    &kp LANG1    &kp LANG2    &trans       &trans       &trans       &trans        &trans &trans &trans &trans &trans &trans
    &out OUT_USB &trans       &out OUT_TOG &trans       &out OUT_BLE &trans        &trans &trans &trans &trans &trans &trans
                                           &trans       &trans       &trans &trans &trans &trans &trans
            >;
        };
        
        numpad_layer {
            bindings = <
    &trans &trans &trans &trans &trans &trans        &trans &kp N7 &kp N8  &kp N9 &kp KP_ASTERISK &trans
    &trans &trans &trans &trans &trans &trans        &trans &kp N4 &kp N5  &kp N6 &kp KP_SLASH    &trans
    &trans &trans &trans &trans &trans &trans        &trans &kp N1 &kp N2  &kp N3 &kp KP_MINUS    &trans
    &trans &trans &trans &trans &trans &trans        &trans &kp N0 &kp DOT &trans &kp KP_PLUS     &trans
                         &trans &trans &trans &trans &trans &trans &trans
            >;
        };
    };
};
